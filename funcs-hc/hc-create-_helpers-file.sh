#!/bin/bash

#
# TODO:
#   - make sure not to override the current file. Currently it remove existing
#     code that was already made on the chart.
#   - cp NOTES.txt from each chart and place it in out own chart
#   - finish up the the function.
#
# NOTE:
#   - null
#
# DESCRIPTION:
#   - null
#
# ARGS:
#   - null
#
# RETURN:
#   - null
#

function funcHelmChart_HelpersFile () {
  local -r func_name="${FUNCNAME[0]}"
  local -r args=("$@")
  local -r dependency_name="${args[0]}"
  local -r chart_name="${args[1]}"

cat << EOF > ./templates/_helpers.tpl
{{- /*
NOTE
  - This file was auto generated by "${func_name} located in ./boilerplate
    repository."
*/}}

{{/*
Expand the name of the chart.
*/}}
{{- define "${chart_name}.name" -}}
{{- default .Chart.Name .Values.global.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "${chart_name}.fullname" -}}
{{- if .Values.global.fullnameOverride }}
{{- .Values.global.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- \$name := default .Chart.Name .Values.global.nameOverride }}
{{- if contains \$name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name \$name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "${chart_name}.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Common labels
*/}}
{{- define "${chart_name}.labels" -}}
helm.sh/chart: {{ include "${chart_name}.chart" . }}
{{ include "${chart_name}.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

{{/*
Selector labels
*/}}
{{- define "${chart_name}.selectorLabels" -}}
app.kubernetes.io/name: {{ include "${chart_name}.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
Create Annotations
*/}}
{{- define "${chart_name}.annotations" -}}
app.kubernetes.io/managed-by: {{ .Release.Service }}
  {{- if eq .Release.Service "Helm" }}
meta.helm.sh/release-name: {{ .Release.Namespace }}
meta.helm.sh/release-namespace: {{ .Release.Namespace }}
    {{- /*
      NOTE:
        - This hook is important because it waits from
          "${chart_name}"'s crds
          to be deployed/created before it applies this yaml(s). Without the hook
          "${chart_name}" fails when deploying, because it tries
          to apply  CRDs that don't exit yet.
    */}}
  {{- end }}
{{- end }}

{{/*
Create the name of the service account to use
*/}}
{{- /*
{{- define "${chart_name}.serviceAccountName" -}}
{{- if .Values.global.service_account.enabled }}
{{- default (include "${chart_name}.fullname" .) .Values.global.service_account.name }}
{{- else }}
{{- default "default" .Values.global.service_account.name }}
{{- end }}
{{- end }}
*/}}

EOF
# sleep 1
#   local -a args_2=( \
#     "${func_name}" \
#     "hc created _helpers.tpl file." \
#   )
#   utilGitter "${args_2[@]}"
}