cmds:
  example-cmd:
    descriptions: ""
    notes: []
    todos: []
    exec-example: |
      echo ""
    flags: {}
  cmds-c:
    global:
      description: "this is not a command, rather a placeholder to list global flags."
      notes: []
      todos: []
      exec-example: ""
      flags:
        --cluster-type:
            default: "minikube"
            required: false
            options: [] # will be generated automatically
        --region-name:
            default: "north-america"
            required: false
            options: [] # will be generated automatically
        --cluster-name:
            default: "dev"
            required: false
            options: [] # will be generated automatically
    c-create-cluster:
      description: "Creates cluster based in clusters.yaml"
      notes:
        - "Supports global flags."
      todos: []
      exec-example: |
        bash main.sh \
          c-create-cluster \
            --cluster-type="minikube" \
            --region-name="north-america" \
            --cluster-name="dev"
      flags: {}
    c-delete-cluster:
      description: "Deletes cluster based in clusters.yaml"
      notes:
        - "Supports global flags."
      todos: []
      exec-example: |
        bash main.sh \
          c-delete-cluster \
            --cluster-type="minikube" \
            --region-name="north-america" \
            --cluster-name="dev"
      flags: {}
    c-install-argo-cd:
      description: "Installs argo-cd, which deployed all the helm-charts."
      notes:
        - "A cluster must be running."
        - "Supports global flags."
      todos: []
      exec-example: |
        bash main.sh \
          c-install-argo-cd \
            --cluster-type="minikube" \
            --region-name="north-america" \
            --cluster-name="dev"
      flags: {}
    c-load-images: {}
    c-read-kubeconfig: {}
  cmds-g:
    g-clone-repositories:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-clone-repositories
      flags: {}
    g-clusters-file-create-lower-region-environment:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-clusters-file-create-lower-region-environment
      flags: {}
    g-clusters-file-update-to-latest-version:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-clusters-file-update-to-latest-version
      flags: {}
    g-helm-chart-dependencies-file-update-to-latest-version:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-helm-chart-dependencies-file-update-to-latest-version
      flags: {}
    g-helm-install-repositories:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-helm-install-repositories
      flags: {}
    g-helm-update-repositores:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-helm-update-repositores
      flags: {}
    g-kind-cluster:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-kind-cluster
      flags: {}
    g-put-repositories:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          g-put-repositories
      flags: {}
  cmds-hc:
    hc-create-_helpers-file:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-create-_helpers-file
      flags: {}
    hc-create-chart:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-create-chart
      flags: {}
    hc-deploy-chart:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-deploy-chart
      flags: {}
    hc-deploy-new-version-to-hub:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-deploy-new-version-to-hub
      flags: {}
    hc-update-helmignore-file:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-update-helmignore-file
      flags: {}
  cmds-hc-c:
    hc-c-create-_helpers-file:
      descriptions: "Use with caution! Resets helm default helpers."
      notes:
        - "USE WITH CAUTION! It doesn't have any safeguards to go back. Maily use if the helm-chart is new or if you haven't created a custom function in _helpers file."
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-create-_helpers-file
      flags: {}
    hc-c-create-chart:
      descriptions: "Creates a helm-chart"
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-create-chart
      flags: {}
    hc-c-create-custom-resource-definitions:
      descriptions: "This command creates a custom-resources definition as a file on each helm-charts-configs repository."
      notes:
        - "cmd is still in the works."
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-create-custom-resource-definitions
      flags: {}
    hc-c-read-values:
      descriptions: "This outputs the values.yaml of a chart"
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-read-values
      flags: {}
    hc-c-update-chart-yaml-file:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-update-chart-yaml-file
      flags: {}
    hc-c-update-helmignore-file:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-update-helmignore-file
      flags: {}
    hc-c-update-values-file-add-dependency-name-as-property:
      descriptions: ""
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-update-values-file-add-dependency-name-as-property
      flags: {}
    hc-c-update-version:
      descriptions: ""
      notes:
        - each iteration per chart calls helm dependency update for all repos, it
          should only do a iteration per repo, insead of all repos.
      todos: []
      exec-example: |
        bash main.sh \
          hc-c-update-version
      flags: {}
    hc-c-update-versions-folder:
      descriptions: "Fetch each helm-chart all newer versions and creates of
                    file in helm-chart-configs/<[dependency_name]>/<[chart_name]>/<[region_name]>/<[cluster_name]>/versions/*
                    folders. It will push to github"
      notes:
        - Must execute `bash main.sh g-clusters-file-update-to-latest-version`
          to get the new versions if helm-chart is not up-up-date.
        - be cautious because some chart versions are not consitent, sometimes
          they are `v1.x.x` or `1.x.x`
      todos:
        - there is a bug that creates tgz2 folder when the command gets executed
          multiple times. For now it must be removed manually if it happens.
        - currently every time you execute the command, it will fetch the
          versions again. Support caching.
        - keep versions in upper environments. Maybe uploaded to s3 to prevent
          having duplicated version tgzs files.
      exec-example: |
        bash main.sh \
          hc-c-update-versions-folder
      flags: {}
  # NOTE:
  #   - Don't support global.flags
  cmds-r:
    r-create-dockerfile-scan:
      description: "Scans images for security."
      notes:
        - "cmd is still in the works."
        - "--folder-name flag does not support multi-folders separated by commma"
      todos: []
      exec-example: |
        bash main.sh \
          r-create-dockerfile-scan \
            --folder-name="apis"
      flags:
        --folder-name:
          default: "null"
          required: true
          options: # will be generated automatically, for now they are static.
            - apis
            - helm-charts
            - helm-chart-configs
            - mobiles
            - scripts
            - uis
    r-create-git-hooks:
      descriptions: "Creates githooks for future version management on each push."
      notes:
        - "cmd is still in the works."
        - "--folder-name flag does not support multi-folders separated by commma"
      todos: []
      exec-example: |
        bash main.sh \
          r-create-dockerfile-scan \
            --folder-name="apis"
      flags:
        --folder-name:
          default: "null"
          required: true
          options: # will be generated automatically, for now they are static.
            - apis
            - helm-charts
            - helm-chart-configs
            - mobiles
            - scripts
            - uis
    r-create-images:
      description: "Creates images only or docker containers for testing."
      notes: []
      todos: []
      exec-example: |
        bash main.sh \
          r-create-images \
            --components="apis,uis" \
            --apps="snitzsh" \
            --projects="main-rust" \
            --action="up"
      flags:
        --components:
            default: "null"
            required: true
            options: [] # will be generated automatically
        --apps:
            default: "null"
            required: true
            options: [] # will be generated automatically
        --projects:
            default: "null"
            required: true
            options: [] # will be generated automatically
        --action:
            default: "null"
            required: true
            options:
              - up
              - down
    r-create-license:
      descriptions: "Creates license."
      notes:
        - "cmd is still in the works."
        - "--folder-name flag does not support multi-folders separated by commma"
      todos: []
      exec-example: |
        bash main.sh \
          r-create-dockerfile-scan \
            --folder-name="apis"
      flags:
        --folder-name:
          default: "null"
          required: true
          options: # will be generated automatically, for now they are static.
            - apis
            - helm-charts
            - helm-chart-configs
            - mobiles
            - scripts
            - uis
    r-deploy-images-to-registry:
      descriptions: "Deploys image or helm-chart to cloud."
      notes:
        - "cmd is still in the works."
        - "--folder-name flag does not support multi-folders separated by commma"
      todos: []
      exec-example: |
        bash main.sh \
          r-create-dockerfile-scan \
            --folder-name="apis"
      flags:
        --folder-name:
          default: "null"
          required: true
          options: # will be generated automatically, for now they are static.
            - apis
            - helm-charts
            - helm-chart-configs
            - mobiles
            - scripts
            - uis
    r-update-gitignore-file:
      description: "Syncs the gitignore files for all projects."
      notes:
        - "--folder-name flag does not support multi-folders separated by commma"
      todos: []
      exec-example: |
        bash main.sh \
          r-update-gitignore-file \
            --folder-name="apis"
      flags:
        --folder-name:
          default: "null"
          required: true
          options: # will be generated automatically, for now they are static.
            - apis
            - helm-charts
            - helm-chart-configs
            - mobiles
            - scripts
            - uis

# Current command executed
exc: {}
