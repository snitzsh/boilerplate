#!/bin/bash
# shellcheck source=/dev/null

source "${SNITZSH_PATH}/boilerplate/utils/source-utils.sh"

#
# TODO:
#   - read the TODO written inside the function.
#
# NOTE:
#   - null
#
# DESCRIPTION:
#   - Patches the dependencies on each helm-chart-repo's Chart.yaml file.
#
# ARGS:
#   - null
#
# RETURN:
#   - null
#
patchHelmChartReposChartYamlFile () {
  local -r func_name="${FUNCNAME[0]}"
  local -r endpoint="user/repos"
  local -r file_name="${SNITZSH_PATH}/boilerplate/.cache/$(echo "${endpoint}" | tr '/' '-').json"
  local -a repositories=()
  local -a helm_chart_dependencies=()
  local -r prefix_one="helm-chart"
  local repository_dir=""

  count_helm_chart_changes=0

  while IFS='' read -r line; do repositories+=("$line"); done < <(
    jq -r '.data | .[] | .name' "${file_name}"
  )

  while IFS='' read -r line; do helm_chart_dependencies+=("$line"); done < <(
    utilGetHelmChartDependecies | yq -r -o=json 'split(" ")' | jq -r '.[]'
  )

  for repository in "${repositories[@]}"; do
    if [ "${repository}" == "boilerplate" ] ; then
      continue
    fi
    # Helm Chart Repos
    if [[ "${repository}" == "${prefix_one}-"* ]]; then
      local repository_nickname=""
      local dependency_name=""
      local chart_name=""
      local found="false"
      repository_dir="${SNITZSH_PATH}/${prefix_one}s"
      for dependency in "${helm_chart_dependencies[@]}"; do
        chart_name=$(echo "${dependency}" | yq -r 'split("|") | .[1]')
        if [[ "${repository}" == *"${chart_name}" ]]; then
          repository_nickname="${chart_name}"
          dependency_name=$(echo "${dependency}" | yq -r 'split("|") | .[0]')
          found="true"
          break
        fi
      done
      if [ "${found}" == "true" ]; then
        local dependency_folder_name="${repository_dir}/${dependency_name}"
        local chart_name_folder_name="${dependency_folder_name}/${repository_nickname}"
        if [ -d "${chart_name_folder_name}" ]; then
          chart_yaml_file="${chart_name_folder_name}/Chart.yaml"
          if [ -f "${chart_yaml_file}" ]; then
            local dependency=""
            dependency=$( \
              utilGetHelmChartDependecy "${dependency_name}" "${chart_name}" \
            )
            # shellcheck disable=SC2016
            function_name="${func_name}" \
            dependency="${dependency}" \
            yq -ri '
              . as $chart_yaml
              | env(dependency) as $dependency
              | env(function_name) as $function_name
              | $chart_yaml.dependencies |= [
                  {
                    "name": $dependency.name,
                    "version": $dependency.version,
                    "repository": $dependency.repository
                  }
                ]
              | ($chart_yaml.dependencies | key) line_comment=("This property was initially auto generated by {function_name} in boilerplate repository." | sub("{function_name}", $function_name))
              | $chart_yaml
            ' "${chart_yaml_file}"
            # TODO:
            # - It should echo 0, if git push fails.
            local updated="0" # where 0 is when there was no change.
            updated=$(
              cd "${chart_name_folder_name}" &&
              git add .
              # this ensures only commit and push if there are changes.
              git diff --staged --quiet || (  \
                git commit --quiet -m "Updated chart's dependencies" > /dev/null &&
                git push --quiet &&
                # Necessary to be able to keep track if a repo was updated.
                echo "1" &&
                sleep 5 \
              )
            )
            if [ "${updated}" == "1" ]; then
              logger "INFO" "Updated chart ${chart_name}'s dependencies for dependency: '${dependency_name}'." "${func_name}"
              ((count_helm_chart_changes++))
            fi
          else
            logger "ERROR" "Repository ${repository} does not have a Chart.yaml file or is not a helm chart. Execute: 'bash main.sh create-helm-chart-in-existing-repository' to create a helm chart." "${func_name}"
          fi
        else
          logger "ERROR" "Repository ${repository} is not cloned yet. Execute: 'bash main.sh clone-repositories' to clone the repository..." "${func_name}"
        fi
      else
        logger "ERROR" "Repository '${repository}' is not found in '${SNITZSH_PATH}/boilerplate/helm-chart-dependencies.yaml' file. Check if repository follows naming convention or dependency is defined properly in '../helm-chart-dependencies.yaml'." "${func_name}"
      fi
    fi
  done

  if [ "${count_helm_chart_changes}" -eq "0" ]; then
    logger "INFO" "${count_helm_chart_changes} repositories were updated." "${func_name}"
  fi
}

main () {
  utilGetRepositories
  patchHelmChartReposChartYamlFile
}

main
