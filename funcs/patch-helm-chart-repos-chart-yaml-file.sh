#!/bin/bash
# shellcheck source=/dev/null

source "${SNITZSH_PATH}/boilerplate/utils/source-utils.sh"

#
# TODO:
#   - null
#
# NOTE:
#   - it loops throught the repositories cloned. ../helm-charts/ directory.
#
# DESCRIPTION:
#   - Patches the dependencies on each helm-chart-repo's Chart.yaml file.
#
# ARGS:
#   - null
#
# RETURN:
#   - null
#
patchHelmChartReposChartYamlFile () {
  local -r func_name="${FUNCNAME[0]}"
  local -a regions_name_arr=()

  # Get region names
  while IFS= read -r value; do
    regions_name_arr+=("${value}")
  done < <(utilQueryClustersYaml "get-regions-name")

  (
    cd "$SNITZSH_PATH/helm-charts" &&
    for dependency_name in *; do
      local chart_name=""
      for chart in  "${dependency_name}/"*; do
        chart_name=$(echo "${chart}" | yq -r 'split("/") | .[1]')
        for region_name in "${regions_name_arr[@]}"; do
          # Get cluster names
          local -a clusters_name_arr=()
          while IFS= read -r value; do
            clusters_name_arr+=("${value}")
          done < <(utilQueryClustersYaml "get-{region_name}-clusters-name" "${region_name}")

          for cluster_name in "${clusters_name_arr[@]}"; do
            (
              cd "./${dependency_name}/${chart_name}" &&
              (
                cd "./${region_name}/${cluster_name}" &&
                if [ -f "./Chart.yaml" ]; then
                  local dependency_obj=""
                  dependency_obj=$( \
                    utilGetHelmChartDependecy "${dependency_name}" "${chart_name}" \
                  )
                  # shellcheck disable=SC2016
                  _func_name="${func_name}" \
                  _dependency_obj="${dependency_obj}" \
                  yq -ri '
                    . as $chart_yaml
                    | env(_dependency_obj) as $_dependency_obj
                    | env(_func_name) as $_func_name
                    | $chart_yaml.dependencies |= [
                        {
                          "name": $_dependency_obj.name,
                          "version": $_dependency_obj.version,
                          "repository": $_dependency_obj.repository
                        }
                      ]
                    | ($chart_yaml.dependencies | key) line_comment=("This property was initially auto generated by {_func_name} in boilerplate repository." | sub("{_func_name}", $_func_name))
                    | $chart_yaml
                  ' "./Chart.yaml"
                  git add .
                  # this ensures only commit and push if there are changes.
                  git diff --staged --quiet || (
                    logger "INFO" "Updated chart ${chart_name}'s dependencies for dependency: '${dependency_name}'." "${func_name}"
                    git commit --quiet -m "Updated chart's dependencies for ${region_name}/${cluster_name}." > /dev/null &&
                    git push --quiet
                    sleep 5
                  )
                fi
              )
            )
          done
        done
      done
    done
  )
}
#
# TODO:
#   - maybe we much create a function to sync our helm-charts/ and respositories in git.
#
# NOTE:
#   - null
#
# DESCRIPTION:
#   - Exectues the function(s)
#
# ARGS:
#   - null
#
# RETURN:
#   - null
#
main () {
  # utilGetRepositories
  patchHelmChartReposChartYamlFile
}

main
