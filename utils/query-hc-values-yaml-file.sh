#!/bin/bash

#
# TODO:
#   - maybe use this function in funcHelmChartConfigsCreateChart.
#   - maybe we can create a different function dedicated to add comments?
#
# NOTE:
#   - null
#
# DESCRIPTION:
#   - Querie file for CRUD properties on `helm-charts/<[dependency_name]>/<[chart_name]>/values.yaml`
#
# ARGS:
#   - null
#
# RETURN:
#   - null
#
function utilQueryHelmChartValuesYamlFile () {
  local -r _path="${PLATFORM_PATH}/helm-charts/"
  local -r args=("$@")
  local -r query_name="${args[0]}"
  local -r dependency_name="${args[1]}"
  local -r chart_name="${args[2]}"
  local -r func_name="${args[3]}"
  local -r values_path="${_path}/${dependency_name}/${chart_name}/values.yaml"

  # NOTE: Any argument after index 4, will be specific per query.
  case "${query_name}" in
    "create-common-props")
      # -ri \
      # shellcheck disable=SC2016
      _dependency_name="${dependency_name}" \
      _chart_name="${chart_name}" \
      _func_name="${func_name}" \
      yq \
        -ri \
        '
          env(_dependency_name) as $_dependency_name
          | env(_chart_name) as $_chart_name
          | env(_func_name) as $_func_name
          | ("This property was initially auto generated by {_func_name} in boilerplate repository." | sub("{_func_name}", $_func_name)) as $chart_comment
          | .
          | with(.["global"];
              .["nameOverride"] = ""
              | .["fullnameOverride"] = ""
              | .["service_account"] = { "enabled": false, "name": "" }
            )
          | .["components"] = []
          | . head_comment="-----------------------------------------------------------------------\nTODO:\n- Make sure the chart always stays up-to-date and follows conventions as if it was an new chart.Ex: _helper definition, values structure, etc.\n#\nNOTES:\n- \"endpoint\" can be anything (job, cronjob, deployment, etc.). Give components[0].name a useful name. Ex: \"name: admin-job\", \"name: admin-apis\". That help us know what \"endpoint\" means in that context. \n#\nDESCRIPTIONS:\n#\nThis file was generate by " + $_func_name + " in boilerplate repo.\n#\nChart supports monoilith, micro-service, and/or hybrid.\n#\nThis is how the override precedence work:\n#\n  - High-level override:\n#\n    endpoints -> components -> globals\n#\n  - In-detail override explanation:\n#\n    -> 1) Each .components[0].endpoints[0] overrides .components[0] values if endpoints[0] values are NOT null/empty-string.\n#\n    -> -> 2) Each components[0] overrides .global values if components[0] values are NOT null/empty-string.\n#\n    -> -> -> 3) .global values overrides .components[0] values if .components[0] are null/empty-string.\n#\n-----------------------------------------------------------------------"
          | (.components | key) headComment=$chart_comment
          | .
        ' "${values_path}"
      ;;
    *)
      echo "false"
      ;;
  esac
}
